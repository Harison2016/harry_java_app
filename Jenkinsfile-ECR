@Library('my-shared-library') _

pipeline{
    
    agent any

    parameters{
        
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '929005029270')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-2')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'hokonkwo29')
        //string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }
    
    stages{
        
        stage('Git Checkout'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{

                    gitCheckout(
                        branch: "master",
                        url: "https://github.com/Harison2016/harry_java_app.git"
                    )
                }
            }
        }

        stage('Unit Test maven'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{

                    mvnTest()
                }
            }
        }

        stage('Integration Test maven'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{

                    mvnIntegrationTest()
                }
            }
        }

        stage('Static code analysis sonarqube'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    def SonarQubecredentialsId = 'sonarqube-api'
                    statiCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }

        stage('Quality Gate Status Check : sonarqube'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    def SonarQubecredentialsId = 'sonarqube-api'
                    QualityGateStatus(SonarQubecredentialsId)
                }
            }
        }

        stage('Maven Build : maven'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    mvnBuild()
                }
            }
        }

        stage('Docker Image Build : ECR'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }

        stage('Docker Image Scan: trivy'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }

        stage('Install AWS CLI'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    installawscli()
                }
            }
        }

        stage('Docker Image Push : ECR'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }

        stage('Docker Image Cleanup : ECR'){
            when { expression {  params.action == 'create' } }
            
            steps{
                
                script{
                    
                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }

    }
}